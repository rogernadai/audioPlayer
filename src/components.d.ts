/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@ionic/core';


declare global {

  namespace StencilComponents {
    interface AudioPlayer {
      'log': (string: any) => void;
      'pause': () => void;
      'play': (url: any) => void;
      'stop': () => void;
    }
  }

  interface HTMLAudioPlayerElement extends StencilComponents.AudioPlayer, HTMLStencilElement {}

  var HTMLAudioPlayerElement: {
    prototype: HTMLAudioPlayerElement;
    new (): HTMLAudioPlayerElement;
  };
  interface HTMLElementTagNameMap {
    'audio-player': HTMLAudioPlayerElement;
  }
  interface ElementTagNameMap {
    'audio-player': HTMLAudioPlayerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'audio-player': JSXElements.AudioPlayerAttributes;
    }
  }
  namespace JSXElements {
    export interface AudioPlayerAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyComponent {

    }
  }

  interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-component': JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageAddAlbum {

    }
  }

  interface HTMLPageAddAlbumElement extends StencilComponents.PageAddAlbum, HTMLStencilElement {}

  var HTMLPageAddAlbumElement: {
    prototype: HTMLPageAddAlbumElement;
    new (): HTMLPageAddAlbumElement;
  };
  interface HTMLElementTagNameMap {
    'page-add-album': HTMLPageAddAlbumElement;
  }
  interface ElementTagNameMap {
    'page-add-album': HTMLPageAddAlbumElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-add-album': JSXElements.PageAddAlbumAttributes;
    }
  }
  namespace JSXElements {
    export interface PageAddAlbumAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageHome {
      'getListAlbum': () => void;
    }
  }

  interface HTMLPageHomeElement extends StencilComponents.PageHome, HTMLStencilElement {}

  var HTMLPageHomeElement: {
    prototype: HTMLPageHomeElement;
    new (): HTMLPageHomeElement;
  };
  interface HTMLElementTagNameMap {
    'page-home': HTMLPageHomeElement;
  }
  interface ElementTagNameMap {
    'page-home': HTMLPageHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-home': JSXElements.PageHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface PageHomeAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
